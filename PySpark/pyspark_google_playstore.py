# -*- coding: utf-8 -*-
"""pyspark_google_playstore.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tn5mUJ5NSoA1u2sX68KCBIwenPNVsO3H
"""

# !pip install pyspark

"""

# *   Task to perform:
    find out TOP 10 reviews given to the apps
    Top paid apps
    Top paid rating apps
    Top 10 installs apps and distribution of type (free /paid)
    Category wise distribution of installed apps
    



"""

from pyspark.sql import *

# from pyspark.sql.types import *
# from pyspark.sql.functions import *
spark = SparkSession.builder.appName("local.com").getOrCreate()

"""**Imported CSV FILE NORMALLY**"""

df = spark.read.csv(
    "/content/drive/MyDrive/data_practices/pyspark/data/googleplaystore.csv"
)
df.printSchema()
df.show()

"""**Creating DataFrame from CSV**"""

from html import escape

df = spark.read.load(
    "/content/drive/MyDrive/data_practices/pyspark/data/googleplaystore.csv",
    format="csv",
    sep=",",
    escape='"',
    header=True,
    inferschema="true",
)

df.printSchema()
df.show()

"""count of rows"""

df.count()

len(df.columns)

"""# Data Understanding and Cleaning"""

df.select([count(col(Reviews)).alias(Reviews) for Reviews in df.columns]).show()

"""**Remove if any null value is there in data**"""

print("Number of duplicate records:", df.count() - df.dropDuplicates().count())

"""**Remove some unnecessary columns**"""

df1 = df.drop("Size", "Last Updated", "Current Ver", "Android Ver")
df1.printSchema()
df1.show()

df1.count()

unique_apps_count = df1.dropDuplicates(["App"]).count()

# Show the count of unique apps
print("Number of unique apps:", unique_apps_count)

df1 = df1.dropDuplicates()
df1.count()

df1.show()

df1.select("Category").distinct().count()

df1.select("Category").distinct().show()

df.select("Type").distinct().show()

null_type = df1.filter(col("Type") == "NaN")
null_type.show()
zero_value = df1.filter(col("Type") == 0)
zero_value.show()
remove_type = ["null_type", "zero_value"]

"""Highest number of categories apps used"""

df.groupBy("Category").count().orderBy(col("count").desc()).show(5)

df1.show()

df1.select("Rating").summary().show()

df1.select("Reviews").summary().show()

df1.groupby("Category").agg(avg("Rating").alias("AveragedRating")).show()

df1.groupby("Category").agg(count("Rating").alias("AveragedRating")).show()

result = df1.groupby("Category").agg(count("Rating").alias("AveragedRating"))

# Order the result in descending order by the aggregated column "AveragedRating"
result = result.orderBy("AveragedRating", ascending=False)

# Show the result
result.show()

df1.printSchema()

df1 = df1.withColumn("Installs", regexp_replace("Installs", "\+", ""))
df1.show()

df2 = df1.withColumn("Installs", regexp_replace("Installs", "\,", ""))
df2.show()

df2 = df2.withColumn("Installs", col("Installs").cast(IntegerType()))
df2.printSchema()
df2.show()

df3 = df2.withColumn("Rating", col("Rating").cast(FloatType()))
df3.printSchema()
df3.show()

df3 = df3.withColumn("Reviews", col("Reviews").cast(IntegerType()))
df3.printSchema()
df3.show()

df3.orderBy("Reviews", ascending=False).show()

"""# ** top 10 reviews given to the apps**"""

q = df3.orderBy(desc("Reviews")).select("App", "Reviews").limit(10)
q.show()

df3.count()

"""Remove duplicates"""

df4 = df3.dropDuplicates(subset=["App", "Category", "Rating", "Installs"])
df4.show()

q = df4.orderBy(desc("Reviews")).select("App", "Reviews").limit(10)
q.show()

"""# **top paid apps**"""

df4.printSchema()

df5 = df4.withColumn("Price", regexp_replace("Price", "\$", ""))
df5.show()

df5 = df5.withColumn("Price", col("Price").cast(FloatType()))
df5.printSchema()
df5.show()

top_paid = (
    df5.filter(df5["Type"] == "Paid")
    .orderBy(desc("Price"))
    .select("App", "Installs", "Price")
    .limit(20)
)
top_paid.show()

"""# Top Installed apps which is paid"""

top_installed_paid = (
    df4.filter(df1["Type"] == "Paid")
    .orderBy(desc("Installs"))
    .select("App", "Installs")
    .limit(20)
)
top_installed_paid.show()

df5.show()

"""# **top paid rating apps**"""

df5.select("Rating").distinct().show()

df6 = df5.filter((col("Type") == "Paid") & (col("Rating") != "NaN"))
df6.show()

df6.count()

top_paid_rating_apps = (
    df6.filter(df1["Type"] == "Paid")
    .orderBy(desc("Rating"))
    .select("App", "Rating")
    .limit(20)
)
top_paid_rating_apps.show()

"""# **top 10 installs apps **"""

top_10_installs = (
    df5.orderBy(desc("Installs")).select("App", "Installs", "Type").limit(10)
)
top_10_installs.show()

type_distribution = df5.groupBy("Type").count()
type_distribution.show()

category_distribution = df1.groupBy("Category").count().orderBy(desc("count"))
category_distribution.show()

print("Correlation between installs and ratings:", df6.stat.corr("Installs", "Rating"))

print("Correlation between installs and Price:", df5.stat.corr("Installs", "Price"))
