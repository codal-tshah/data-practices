# -*- coding: utf-8 -*-
"""PySpark SQL Functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O_8G8PVRu38WdIg96BqmQPIS6_Gr1NBY
"""

# !pip install pyspark

from pyspark import SparkContext
from pyspark.sql import SparkSession

spark = SparkSession.builder.appName("newapp.com").getOrCreate()
from pyspark.sql.functions import *

"""# **Aggregate Functions**"""

simpleData = [
    ("James", "Sales", 3000),
    ("Michael", "Sales", 4600),
    ("Robert", "Sales", 4100),
    ("Maria", "Finance", 3000),
    ("James", "Sales", 3000),
    ("Scott", "Finance", 3300),
    ("Jen", "Finance", 3900),
    ("Jeff", "Marketing", 3000),
    ("Kumar", "Marketing", 2000),
    ("Saif", "Sales", 4100),
]
schema = ["employee_name", "department", "salary"]

df = spark.createDataFrame(data=simpleData, schema=schema)
df.printSchema()
df.show()

"""**approx_count_distinct() function returns the count of distinct items in a group.**"""

print("distinct: ", str(df.select(approx_count_distinct("salary")).collect()[0][0]))

df.select(collect_list("salary")).show(truncate=False)

df.select(collect_set("salary")).show(truncate=False)

df2 = df.select(countDistinct("department", "salary"))
df2.show(truncate=False)
print("Distinct Count of Department & Salary: " + str(df2.collect()[0][0]))

print("count: " + str(df.select(count("salary")).collect()[0]))

"""**first() function returns the first element in a column when ignoreNulls is set to true, it returns the first non-null element.**"""

df.select(first("salary")).show(truncate=False)

df.select(last("salary")).show(truncate=False)

df.select(kurtosis("salary")).show(truncate=False)

print("kurtotsis: ", df.select(kurtosis("salary")).show(truncate=False))

df.select(max("salary")).show(truncate=False)
df.select(min("salary")).show(truncate=False)
df.select(mean("salary")).show(truncate=False)
df.select(skewness("salary")).show(truncate=False)
df.select(stddev("salary"), stddev_samp("salary"), stddev_pop("salary")).show(
    truncate=False
)
df.select(sum("salary")).show(truncate=False)
df.select(sumDistinct("salary")).show(truncate=False)
df.select(variance("salary"), var_samp("salary"), var_pop("salary")).show(
    truncate=False
)


"""# **JSON Functions**"""

jsonString = (
    """{"Zipcode":704,"ZipCodeType":"STANDARD","City":"PARC PARQUE","State":"PR"}"""
)
df = spark.createDataFrame([(1, jsonString)], ["id", "value"])
df.show(truncate=False)

"""**from_json() function is used to convert JSON string into Struct type or Map type.**"""

from pyspark.sql.types import MapType, StringType
from pyspark.sql.functions import from_json

df2 = df.withColumn("value", from_json(df.value, MapType(StringType(), StringType())))
df2.printSchema()
df2.show(truncate=False)

"""**to_json() function is used to convert DataFrame columns MapType or Struct type to JSON string. **"""

from pyspark.sql.functions import to_json, col

df2.withColumn("value", to_json(col("value"))).show(truncate=False)

"""**json_tuple() is used the query or extract the elements from JSON column and create the result as a new columns.**"""

from pyspark.sql.functions import json_tuple

df.select(col("id"), json_tuple(col("value"), "Zipcode", "ZipCodeType", "City")).toDF(
    "id", "Zipcode", "ZipCodeType", "City"
).show(truncate=False)

from pyspark.sql.functions import get_json_object

df.select(
    col("id"), get_json_object(col("value"), "$.ZipCodeType").alias("ZipCodeType")
).show(truncate=False)

from pyspark.sql.functions import schema_of_json, lit

schemaStr = (
    spark.range(1)
    .select(
        schema_of_json(
            lit(
                """{"Zipcode":704,"ZipCodeType":"STANDARD","City":"PARC PARQUE","State":"PR"}"""
            )
        )
    )
    .collect()[0][0]
)
print(schemaStr)
