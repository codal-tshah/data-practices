# -*- coding: utf-8 -*-
"""pandas_intermediate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fvheiggiT7IGV1M99yjJBXNSNixpdeWq
"""

from google.colab import drive  # type: ignore

drive.mount("/content/drive")

"""# **Create plots in pandas**

"""

import pandas as pd
import matplotlib.pyplot as plt

"""**parse_dates=True, helps to plot the dates properly**"""

data = pd.read_csv(
    "/content/drive/MyDrive/data_practices/pandas/data/air_quality_no2.csv",
    index_col=0,
    parse_dates=True,
)
data.head()

data.plot()
plt.show()

paris = data["station_paris"].plot()
# plt.show()

"""**alpha is use for opacity of points in graph** bold text"""

data.plot.scatter(x="station_london", y="station_paris", alpha=0.5).plot()

data.plot.box()

"""**subplots is use for multiple plots of columns**"""

areas = data.plot.area(figsize=(12, 8), subplots=True)
# areas

data.plot.line(y="station_london")

fig, axs = plt.subplots(figsize=(12, 4))  # Create an empty Matplotlib Figure and Axes
data.plot.area(ax=axs)  # Use pandas to put the area plot on the prepared Figure/Axes
axs.set_ylabel("concentration")  # Do any Matplotlib customization you like
fig.savefig(
    "concentrations.png"
)  # Save the Figure/Axes using the existing Matplotlib method.
plt.show()  # Display the plot

"""# **create new columns derived from existing columns**"""

data

data["london_mg_per_cubic"] = data["station_london"] * 1.882
data

"""**Ratio Paris versus Antwerp**"""

data["Paris_ratio"] = data["station_paris"] / data["station_antwerp"]
data

columns_renamed = data.rename(
    columns={
        "station_antwerp": "Antwerp",
        "station_london": "London",
        "station_paris": "Paris",
    }
)
columns_renamed.head()

"""**converting the column names to lowercase letters can be done using a function**"""

columns_renamed = columns_renamed.rename(columns=str.lower)
columns_renamed.head()

"""# **calculate summary statistics**"""

import pandas as pd

titanic_data = pd.read_csv(
    "/content/drive/MyDrive/data_practices/pandas/data/titanic.csv"
)
titanic_data.head()

age_mean = titanic_data[["Age"]].mean()
print(age_mean)

age_fare_median = titanic_data[["Age", "Fare"]].median()
age_fare_median

titanic_data.agg(
    {
        "Age": ["min", "max", "median", "mean", "skew"],
        "Fare": ["min", "max", "median", "mean", "skew"],
    }
)

"""**Aggregating statistics grouped by category**"""

titanic_data[["Age", "Sex"]].groupby("Sex").mean()

"""**groupby provides the power of the split-apply-combine pattern**"""

titanic_data[["Age", "Embarked"]].groupby("Embarked").mean()

titanic_data.groupby("Sex")["Age"].mean()

titanic_data.groupby(["Sex", "Pclass"])[["Fare"]].mean()

titanic_data.groupby(["Sex", "Pclass"])["Age"].mean()

titanic_data["Pclass"].value_counts()

"""**value_counts() method counts the number of records for each category in a column.**"""

titanic_data["Sex"].value_counts()

"""# **Reshape the layout of tables**"""

titanic_data = pd.read_csv(
    "/content/drive/MyDrive/data_practices/pandas/data/titanic.csv"
)
titanic_data.head()

air_quality_long = pd.read_csv(
    "/content/drive/MyDrive/data_practices/pandas/data/air_quality_long.csv",
    index_col="date.utc",
    parse_dates=True,
)
air_quality_long.head()

titanic_data.sort_values("Age").head()

titanic_data.sort_values(["Pclass", "Age"], ascending=False).head()

no2 = air_quality_long[air_quality_long["parameter"] == "no2"]
no2.head()

no2_subset = no2.sort_index().groupby(["location"]).head(2)
no2_subset

no2_subset.pivot(columns="location", values="value")

no2.pivot(columns="location", values="value").plot()

air_quality_long.pivot_table(
    values="value", index="location", columns="parameter", aggfunc="mean"
)

"""**margins (subtotals) for each variable, set the margins parameter to True**"""

air_quality_long.pivot_table(
    values="value",
    index="location",
    columns="parameter",
    aggfunc="mean",
    margins=True,
)

air_quality_long.groupby(["location", "parameter"])[["value"]].mean()

no2_pivoted = no2.pivot(columns="location", values="value").reset_index()
no2_pivoted

no2_single = no2.pivot(columns=["location", "value"])
no2_single

"""**pandas.melt() method on a DataFrame converts the data table from wide format to long format. The column headers become the variable names in a newly created column.**"""

no_2 = no2_pivoted.melt(id_vars="date.utc")
no_2

no_2 = no2_pivoted.melt(
    id_vars="date.utc",
    value_vars=["BETR801", "FR04014", "London Westminster"],
    value_name="NO_2",
    var_name="id_location",
)
no_2
